{"version":3,"sources":["Header/Header.module.css","Library/Library.module.css","Header/Header.js","Library/Library.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","header","props","className","classes","Header","library","Library","App","state","books","id","title","author","pages","read","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+GACAA,EAAOC,QAAU,CAAC,OAAS,yB,gBCA3BD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,KAAO,sBAAsB,iBAAmB,kCAAkC,OAAS,0B,sNCYjIC,EATA,SAAAC,GACb,OACE,4BAAQC,UAAWC,IAAQC,QACzB,4C,gBCsBSC,EAzBC,SAAAJ,GACd,OACE,2BAAOC,UAAWC,IAAQG,SACxB,+BACE,4BACE,qCACA,sCACA,qCACA,oCACA,kDACA,+CCsCKC,E,YA9Cb,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACXC,MAAO,CACL,CACEC,GAAI,EACJC,MAAO,aACPC,OAAQ,iBACRC,MAAO,IACPC,KAAM,gBAER,CACEJ,GAAI,EACJC,MAAO,uBACPC,OAAQ,gBACRC,MAAO,IACPC,KAAM,gBAER,CACEJ,GAAI,EACJC,MAAO,aACPC,OAAQ,sBACRC,MAAO,IACPC,KAAM,gBAER,CACEJ,GAAI,EACJC,MAAO,eACPC,OAAQ,oBACRC,MAAO,IACPC,KAAM,kBA9BA,E,sEAqCZ,OACE,yBAAKZ,UAAU,OACb,kBAACE,EAAD,MACA,kBAACE,EAAD,CAASG,MAAOM,KAAKP,MAAMC,a,GAzCjBO,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e07aaa63.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Header\":\"Header_Header__3Ipkk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Library\":\"Library_Library__3JFmO\",\"read\":\"Library_read__1-Kk-\",\"ChangeReadStatus\":\"Library_ChangeReadStatus__29dUB\",\"Remove\":\"Library_Remove__2PPqK\"};","import React from \"react\";\n//import Modal from \"./Modal/Modal\";\nimport classes from \"./Header.module.css\";\n\nconst header = props => {\n  return (\n    <header className={classes.Header}>\n      <h1>My Library</h1>\n      {/* <Modal buttonText=\"Add New Book\" addNewBook={props.addNewBook} /> */}\n    </header>\n  );\n};\n\nexport default header;\n","import React from \"react\";\n// import Books from \"./Books/Books\";\nimport classes from \"./Library.module.css\";\n\nconst library = props => {\n  return (\n    <table className={classes.Library}>\n      <thead>\n        <tr>\n          <th>Title</th>\n          <th>Author</th>\n          <th>Pages</th>\n          <th>Read</th>\n          <th>Change Read Status</th>\n          <th>Remove Book</th>\n        </tr>\n      </thead>\n\n      {/* <tbody>\n        <Books\n          books={props.books}\n          removeBookHandler={props.removeBookHandler}\n          changeReadStatusHandler={props.changeReadStatusHandler}\n        />\n      </tbody> */}\n    </table>\n  );\n};\n\nexport default library;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./Header/Header\";\nimport Library from \"./Library/Library\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      books: [\n        {\n          id: 0,\n          title: \"The Hobbit\",\n          author: \"J.R.R. Tolkien\",\n          pages: 295,\n          read: \"Not Read Yet\"\n        },\n        {\n          id: 1,\n          title: \"The 48 Laws of Power\",\n          author: \"Robert Greene\",\n          pages: 480,\n          read: \"Not Read Yet\"\n        },\n        {\n          id: 2,\n          title: \"The Prince\",\n          author: \"Niccolo Machiavelli\",\n          pages: 112,\n          read: \"Not Read Yet\"\n        },\n        {\n          id: 3,\n          title: \"Tides of War\",\n          author: \"Steven Pressfield\",\n          pages: 448,\n          read: \"Not Read Yet\"\n        }\n      ]\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Library books={this.state.books} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}